unit controladores;

interface

uses modelos, Generics.collections, SysUtils, Classes;

type
  TManipuladorArquivo = class
    /// variavel para refenciar arquivo;
    ///
  private
    linhaEntrada: string;
    linhaSaida: string;
    arquivo: TextFile;

  protected

  public

    function proximo: string;
    function header: string;
    function salvar(  inputDados: TArray<String>;
 arquivoSaida: string
): boolean;
    constructor create; overload;
    constructor create(arquivoEntrada: string); overload;
    procedure fecharArquivo;
  end;

type
  TControlador = class
  const

    insertSQL: string = ' insert into '; // insert
    valuesSQL: string = ' values '; // valores

  private
    modelo: Metadado;
    separador: string;
    header: TArray<string>;
    campos: TArray<string>;

    arquivoEntrada: TManipuladorArquivo;
    arquivoSaida: TManipuladorArquivo;
    function setCamposInsert(valores: TArray<string>): boolean;
    // configura os headers
    function camposValues(valores: TArray<string>): string;
    // formata os campos a sere inserido

    function configSQL(header, valor: TArray<String>): String;
  protected

  public
    function getCampos: string;
    function getDados: string;
    function processar: string;
    constructor create; overload;
    constructor create(strarquivoEntrada, strarquivoSaida,
      strseparador: string); overload;
    function salvarArquivo(inputArquivo: string;
      inputQuantidade: integer): boolean;
  end;

implementation

{ Controller }

constructor TControlador.create;
begin

end;

function TControlador.processar: string;

var
  valor: TArray<string>;
  resultado: String;
  dados: TDictionary<string, string>;
  retorno: string;
  i: integer;
  Key: string;
  tmpString: string;
  list: TstringList;
  chrArray: Array [0 .. 3] of String;
begin

  tmpString := arquivoEntrada.proximo;
  if tmpString <> '' then

  begin
    try
      chrArray[0] := chr(9);
      valor := tmpString.Split(chrArray);
    finally

    end;
  end;

  i := 0;

  resultado := configSQL(self.header, valor);
  retorno := resultado + AnsiString(#13#10);

  Result := retorno;

end;

function TControlador.configSQL(header, valor: TArray<String>): String;
var
  i: integer;
  tmpInsert, tmpValores: String;
begin
  tmpInsert := 'insert into tabela ( ';
  tmpValores := ' values ( ';

  for i := 0 to High(header) do
  begin

    tmpInsert := tmpInsert + StringReplace(header[i], ' ', '_',
      [rfReplaceAll, rfIgnoreCase]);

    tmpValores := tmpValores + #39 + valor[i] + #39;

    if i < high(header) then
    begin
      tmpInsert := tmpInsert + ', ';
      tmpValores := tmpValores + ', ';
    end;
  end;

  Result := tmpInsert + ')' + tmpValores + ')';

end;

function TControlador.camposValues(valores: TArray<string>): string;
begin

end;

function TControlador.setCamposInsert(valores: TArray<string>): boolean;
begin

end;

constructor TControlador.create(strarquivoEntrada, strarquivoSaida,
  strseparador: string);
var
  tmpString: string;
  chrArray: Array [0 .. 0] of char;
begin
  try
    self.arquivoEntrada := TManipuladorArquivo.create(strarquivoEntrada);
    self.arquivoSaida := TManipuladorArquivo.create(strarquivoSaida);

    tmpString := self.arquivoEntrada.header;
    chrArray[0] := chr(9);

    self.header := tmpString.Split(chrArray);

  finally
  end;
end;

function TControlador.getCampos: string;
begin
  /// return ( campo1, campo2, campo3 )
end;

function TControlador.getDados: string;
begin
  /// return (variavel1, variavel2, variavel3)
end;

function TControlador.salvarArquivo(inputArquivo: string;
  inputQuantidade: integer): boolean;
begin
  /// dadosSaida :=   TArray<String>
  ///
  /// loop ate inputquantidade
  /// dadosSaida > Self.proximo

  /// arquivoSaida.salvar(dadosSaida, quantidade)
end;

{ TManipuladorArquivo }

constructor TManipuladorArquivo.create;
begin

end;

procedure TManipuladorArquivo.fecharArquivo;
begin
  CloseFile(self.arquivo);
end;

constructor TManipuladorArquivo.create(arquivoEntrada: string);
begin
  try
    // AssignFile(Self.arquivo, linhaEntrada);
    AssignFile(self.arquivo, arquivoEntrada);
{$I-}
    reset(self.arquivo);
{$I+}
  finally

  end;
end;

function TManipuladorArquivo.header: string; // deve ser utilizado primeiro

begin
  Result := proximo();
end;

function TManipuladorArquivo.proximo: string;
var
  linha: string;
begin
  try
    Result := '';
    if (not eof(self.arquivo)) then
    begin
      readln(self.arquivo, linha);
      Result := linha;
    end;
  finally

  end;
end;

function TManipuladorArquivo.salvar(  inputDados: TArray<String>;
 arquivoSaida: string
): boolean;
var
  i: integer;
  outputArquivo : TextFile;
begin
  AssignFile(outputArquivo, Self.arquivo);

  for i := Low to high(inputDados) do
  begin
     writeLn(arquivoSaida, inputDados[i]);
  end;

end;

end.
