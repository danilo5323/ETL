unit modelos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtDlgs,
  Generics.collections;

type
  Metadado = Class
  private

    data: TDictionary<String, String>;
    header: TDictionary<String, String>;
    banco: String;
    /// banco que será utilizado

  public

    constructor Create; Overload;
    constructor Create(inputTitulo, inputDados: TArray<string>); Overload;
    //function configure(inputTitulo, inputDados: TArray<string>)  : TDictionary<string, string>;
    function getDados: TDictionary<String, String>;
    procedure configureP(inputTitulo, inputDados: TArray<string>;
  dados: TDictionary<String, String>);

  End;

implementation

{ Metadado }

procedure Metadado.configureP(inputTitulo, inputDados: TArray<string>;
  dados: TDictionary<String, String>);
var
  retorno: TDictionary<String, String>;
  i: integer;
  E: Exception;
begin
  //etorno := TDictionary<String, String>.Create();
  try
    begin

      for i := 0 to High(inputTitulo) do
      begin
        dados.Add(inputTitulo[i], inputDados[i]);
      end;
    end;
    //Result := retorno;
  except
    on E: Exception do
      i := 0;

  end;

end;

constructor Metadado.Create();

begin

end;

constructor Metadado.Create(inputTitulo, inputDados: TArray<string>);
var
  i: integer;
  E: Exception;
begin

  try
     Self.header := inputTitulo;
     Self.data := inputDados;
  end;
end;

function Metadado.getDados: TDictionary<String, String>;
begin
  if data.Count > 0 then
  begin
    Result := data;
  end
  else
  begin
    Result := nil;
  end;

end;

end.
